"""Merge dashboard_id changes

Revision ID: merge_dashboard_id_changes
Revises: d8dd80ba8de1
Create Date: 2024-04-08 13:04:23.644356

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = 'merge_dashboard_id_changes'
down_revision: Union[str, None] = 'd8dd80ba8de1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if the column exists first
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('role_permission')]
    
    if 'dashboard_id' in columns:
        # Drop any foreign key constraints first
        for fk in inspector.get_foreign_keys('role_permission'):
            if fk['constrained_columns'] == ['dashboard_id']:
                op.drop_constraint(fk['name'], 'role_permission', type_='foreignkey')
        
        # Now drop the column
        op.drop_column('role_permission', 'dashboard_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    columns = [col['name'] for col in inspector.get_columns('role_permission')]
    
    if 'dashboard_id' not in columns:
        op.add_column('role_permission', sa.Column('dashboard_id', postgresql.UUID(), nullable=True))
    # ### end Alembic commands ### 